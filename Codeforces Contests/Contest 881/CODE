// 881 Div3

// 1
// #include <iostream>
// #include <bits/stdc++.h>
// using namespace std;
// int main()
// {
//     long long T;
//     cin >> T;
//     while (T--)
//     {
//         long long N;
//         cin >> N;
//         vector<int> input;
//         for (int i = 0; i < N; i++)
//         {
//             int a;
//             cin >> a;
//             input.push_back(a);
//         }
//         sort(input.begin(), input.end());
//         long long answer = 0;
//         int i = 0;
//         int j = N - 1;
//         while (i < j)
//         {
//             answer += input[j] - input[i];
//             i++;
//             j--;
//         }
//         cout << answer << "\n";
//     }
//     return 0;
// }

// 2
// #include <iostream>
// #include <bits/stdc++.h>
// using namespace std;
// int main()
// {
//     long long T;
//     cin >> T;
//     while (T--)
//     {
//         long long N;
//         cin >> N;
//         vector<int> input;
//         long long sum = 0;
//         long long ans = 0;
//         long long count = 0;
//         for (int i = 0; i < N; i++)
//         {
//             int a;
//             cin >> a;
//             input.push_back(a);
//             if (a < 0)
//             {
//                 count++;
//                 sum += abs(a);
//             }
//             else
//             {
//                 sum += a;
//             }
//         }
//         // now we have sum as the sum possible and count of negative numbes
//         int i = 0;
//         while (i < N && count > 0)
//         {
//             if (input[i] < 0)
//             {

//                 i++;
//                 while (i < N && input[i] <= 0)
//                 {
//                     if (input[i] < 0)
//                     {
//                         count--;
//                     }
//                     i++;
//                 }
//                 // here we will land at i that is positive
//                 ans += 1;
//             }
//             i++;
//         }
//         cout << sum << " " << ans << "\n";
//     }
//     return 0;
// }

// 3
//  #include <iostream>
//  #include <bits/stdc++.h>
//  using namespace std;
//  int main()
//  {
//      long long T;
//      cin >> T;
//      while (T--)
//      {
//          long long N;
//          cin >> N;
//           long long answer=0;
//           while(N)
//           {
//              answer+=N;
//              N/=2;
//           }
//           cout<<answer<<"\n";
//      }
//      return 0;
//  }

// 4
//  881 Div3

// 1
// #include <iostream>
// #include <bits/stdc++.h>
// using namespace std;
// int main()
// {
//     long long T;
//     cin >> T;
//     while (T--)
//     {
//         long long N;
//         cin >> N;
//         vector<int> input;
//         for (int i = 0; i < N; i++)
//         {
//             int a;
//             cin >> a;
//             input.push_back(a);
//         }
//         sort(input.begin(), input.end());
//         long long answer = 0;
//         int i = 0;
//         int j = N - 1;
//         while (i < j)
//         {
//             answer += input[j] - input[i];
//             i++;
//             j--;
//         }
//         cout << answer << "\n";
//     }
//     return 0;
// }

// 2
// #include <iostream>
// #include <bits/stdc++.h>
// using namespace std;
// int main()
// {
//     long long T;
//     cin >> T;
//     while (T--)
//     {
//         long long N;
//         cin >> N;
//         vector<int> input;
//         long long sum = 0;
//         long long ans = 0;
//         long long count = 0;
//         for (int i = 0; i < N; i++)
//         {
//             int a;
//             cin >> a;
//             input.push_back(a);
//             if (a < 0)
//             {
//                 count++;
//                 sum += abs(a);
//             }
//             else
//             {
//                 sum += a;
//             }
//         }
//         // now we have sum as the sum possible and count of negative numbes
//         int i = 0;
//         while (i < N && count > 0)
//         {
//             if (input[i] < 0)
//             {

//                 i++;
//                 while (i < N && input[i] <= 0)
//                 {
//                     if (input[i] < 0)
//                     {
//                         count--;
//                     }
//                     i++;
//                 }
//                 // here we will land at i that is positive
//                 ans += 1;
//             }
//             i++;
//         }
//         cout << sum << " " << ans << "\n";
//     }
//     return 0;
// }

// 3

// #include <iostream>
// #include <bits/stdc++.h>
// using namespace std;
// void dfs(vector<vector<int>> &adj, int node, int parent, vector<int> &store)
// {
//     if (adj[node].size() == 1 && adj[node][0] == parent)
//     {
//         // it means it is the leaf node
//         store[node] = 1;
//         return;
//     }
//     for (auto it : adj[node])
//     {
//         if (it != parent)
//         {
//             dfs(adj, it, node, store);
//             store[node] =store[node]+ store[it];
//         }
//     }
// }
// int main()
// {
//     long long T;
//     cin >> T;
//     while (T--)
//     {
//         long long N;
//         cin >> N;
//         vector<vector<int>> adj(N + 1);
//         for (int i = 0; i < (N - 1); i++)
//         {
//             long long a, b;
//             cin >> a >> b;
//             adj[a].push_back(b);
//             adj[b].push_back(a);
//         }
//         long long Q;
//         cin >> Q;
//         vector<int> store(N + 1, 0);
//         dfs(adj, 1, -1, store);
//         for (int i = 0; i < Q; i++)
//         {
//             long long A, B;
//             cin >> A >> B;
//             long long answer1;
//             long long answer2;
//             answer1 = store[A];
//             answer2 = store[B];
//             cout << (answer1 * answer2) << "\n";
//         }
//     }
//     return 0;
// }
